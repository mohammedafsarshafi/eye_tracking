import cv2
import torch
from yolov5 import YOLOv5  # Ultralytics ke bajaye yolov5 package
import os
import warnings

# Suppress FutureWarning for torch.cuda.amp
warnings.filterwarnings("ignore", category=FutureWarning, module="torch.cuda.amp")

# Load trained YOLO model with absolute path
model_path = r"C:\Users\shafi\source\repos\eye_tracker\eye_tracker\models\best.pt"
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model file not found at: {model_path}")

# YOLOv5 model load karo
device = "cuda" if torch.cuda.is_available() else "cpu"
model = YOLOv5(model_path, device=device)

def process_mobile_detection(frame):
    # YOLOv5 ke liye predict method use karo
    results = model.predict(frame, size=640, augment=False)
    mobile_detected = False

    # Results process karo
    for result in results.xyxy[0]:  # YOLOv5 ka output format
        x1, y1, x2, y2, conf, cls = result
        conf = conf.item()
        cls = int(cls.item())

        # Lowered confidence threshold to 0.5 to allow more detections
        if conf < 0.5 or cls != 0:  # Mobile class index is 0
            print(f"Missed/Rejected detection: Confidence {conf:.2f}, Class {cls}")
            continue

        x1, y1, x2, y2 = map(int, [x1, y1, x2, y2])
        w = x2 - x1
        h = y2 - y1
        aspect_ratio = w / h if h != 0 else 0

        # Relaxed aspect ratio check (0.3 to 3) to allow more detections
        if aspect_ratio < 0.3 or aspect_ratio > 3:
            print(f"False positive rejected: Aspect ratio {aspect_ratio:.2f} out of range")
            continue

        label = f"Mobile ({conf:.2f})"

        # Draw rectangle and label
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 3)
        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        mobile_detected = True

    return frame, mobile_detected

def main():
    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    if not cap.isOpened():
        print("Error: Could not open webcam!")
        return

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to capture frame!")
            break

        processed_frame, mobile_detected = process_mobile_detection(frame)
        if mobile_detected:
            print("Mobile detected!")
        else:
            print("No mobile detected in this frame.")

        cv2.imshow("Mobile Detection", processed_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
